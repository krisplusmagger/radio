id: customModule_getTaps
label: getTaps
category: '[customModule]'

templates:
  imports: from gnuradio import customModule
  make: customModule.getTaps(${fft_len},  ${cp_len},
        ${propagate_channel_state}, ${fixed_frame_len}, ${channel_taps_filename},
        ${carrier_offsets_filename})

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#     * default
parameters:
-   id: fft_len
    label: FFT length
    dtype: int
    default: fft_len
# -   id: equalizer
#     label: Equalizer
#     dtype: raw
# -   id: len_tag_key
#     label: Length Tag Key
#     dtype: string
-   id: cp_len
    label: CP length
    dtype: int
    default: fft_len/4    
-   id: propagate_channel_state
    label: Propagate Channel State
    dtype: enum
    options: ['True', 'False']
    option_labels: ['Yes', 'No']    
-  id: fixed_frame_len
   label: Fixed frame length
   dtype: int
   default: '0'
   hide: ${ ('none' if fixed_frame_len else 'part') }
-  id: channel_taps_filename 
   label: Channel Taps Filename
   dtype: string
-  id: carrier_offsets_filename
   label: Carrier Offsets Filename
   dtype: string

#- id: ...
#  label: ...
#  dtype: ...

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
-   domain: stream
    dtype: complex
    vlen: ${ fft_len }

outputs:
#- label: ...
-   domain: message
    dtype: int
    vlen: ${ fft_len }
#  optional: ...

# cpp_templates:
#     includes: ['#include <gnuradio/customModule/getTaps.h>']
#     declarations: 'digital::ofdm_frame_equalizer_vcvc::sptr ${id};'
#     make: |-
#         this->${id} = digital::ofdm_frame_equalizer_vcvc::make(
#             ${equalizer},
#             ${cp_len},
#             ${len_tag_key},
#             ${propagate_channel_state},
#             ${fixed_frame_len});
#     link: ['gnuradio::gnuradio-digital']

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
